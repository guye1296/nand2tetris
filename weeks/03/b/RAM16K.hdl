// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    // We can divide `address` into two parts - the chip group and the internal address
    DMux4Way(in=load, sel=address[12..13], a=ramGroup0, b=ramGroup1, c=ramGroup2, d=ramGroup3);
    // We then `and` each group 
    And(a=load, b=ramGroup0, out=shouldLoadGroup0);
    RAM4K(in=in, load=shouldLoadGroup0, address=address[0..11], out=outGroup0);
    And(a=load, b=ramGroup1, out=shouldLoadGroup1);
    RAM4K(in=in, load=shouldLoadGroup1, address=address[0..11], out=outGroup1);
    And(a=load, b=ramGroup2, out=shouldLoadGroup2);
    RAM4K(in=in, load=shouldLoadGroup2, address=address[0..11], out=outGroup2);
    And(a=load, b=ramGroup3, out=shouldLoadGroup3);
    RAM4K(in=in, load=shouldLoadGroup3, address=address[0..11], out=outGroup3);

    // Then we mux the groups according to the selected group
    Mux4Way16(a=outGroup0, b=outGroup1, c=outGroup2, d=outGroup3, sel=address[12..13], out=out);
}